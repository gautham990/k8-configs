# This is Postgresql cluster setup with repmgr. For HA use pgpool. 

apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-cm
data:
  pre-stop.sh: |-
    #!/bin/bash
    set -o errexit
    set -o pipefail
    set -o nounset

    # Debug section
    exec 3>&1
    exec 4>&2

    # Load Libraries
    . /opt/bitnami/scripts/liblog.sh
    . /opt/bitnami/scripts/libpostgresql.sh
    . /opt/bitnami/scripts/librepmgr.sh

    # Auxiliary functions
    is_new_primary_ready() {
        return_value=1
        currenty_primary_node="$(repmgr_get_primary_node)"
        currenty_primary_host="$(echo $currenty_primary_node | awk '{print $1}')"

        info "$currenty_primary_host != $REPMGR_NODE_NETWORK_NAME"
        if [[ $(echo $currenty_primary_node | wc -w) -eq 2 ]] && [[ "$currenty_primary_host" != "$REPMGR_NODE_NETWORK_NAME" ]]; then
            info "New primary detected, leaving the cluster..."
            return_value=0
        else
            info "Waiting for a new primary to be available..."
        fi
        return $return_value
    }

    export MODULE="pre-stop-hook"

    if [[ "${BITNAMI_DEBUG}" == "true" ]]; then
        info "Bash debug is on"
    else
        info "Bash debug is off"
        exec 1>/dev/null
        exec 2>/dev/null
    fi

    # Load PostgreSQL & repmgr environment variables
    . /opt/bitnami/scripts/postgresql-env.sh

    postgresql_enable_nss_wrapper

    # Prepare env vars for managing roles
    primary_node="$(repmgr_get_primary_node)"
    primary_host="$(echo $primary_node | awk '{print $1}')"

    # Stop postgresql for graceful exit.
    postgresql_stop

    if [[ "$primary_host" == "$REPMGR_NODE_NETWORK_NAME" ]]; then
        info "Primary node need to wait for a new primary node before leaving the cluster"
        retry_while is_new_primary_ready 10 5
    else
        info "Standby node doesn't need to wait, leaving the cluster."
    fi
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-headless-svc
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - name: postgresql
    port: 5432
    targetPort: postgresql
    protocol: TCP 
  selector:
    app: postgres

---

apiVersion: v1
kind: Secret
metadata:
  name: postgres-secrets
data:
  postgresql-password: "V2JyVHBOM2c3cQ=="
  repmgr-password: "c1ZwYm90R2d4Nw=="

---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
spec:
  serviceName: postgres-headless-svc
  replicas: 3
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      securityContext:
        fsGroup: 1001
      containers:
        - name: postgresql
          lifecycle:
            preStop:
              exec:
                command:
                  - /pre-stop.sh
          image: docker.io/bitnami/postgresql-repmgr:16-debian-12
          resources:
            requests:
              memory: "1Gi"
              cpu: "1"
            limits:
              memory: "2Gi"
              cpu: "2"
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            - name: POSTGRES_USER
              value: "postgres"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secrets
                  key: postgresql-password
            - name: POSTGRES_DB
              value: "postgres"
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "true"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit, repmgr"
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: REPMGR_UPGRADE_EXTENSION
              value: "no"
            - name: REPMGR_PGHBA_TRUST_ALL
              value: "no"
            - name: REPMGR_MOUNTED_CONF_DIR
              value: "/bitnami/repmgr/conf"
            - name: REPMGR_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: REPMGR_PARTNER_NODES
              value: postgres-0.postgres-headless-svc.$(REPMGR_NAMESPACE).svc.cluster.local,postgres-1.postgres-headless-svc.$(REPMGR_NAMESPACE).svc.cluster.local,postgres-2.postgres-headless-svc.$(REPMGR_NAMESPACE).svc.cluster.local
            - name: REPMGR_PRIMARY_HOST
              value: "postgres-0.postgres-headless-svc.$(REPMGR_NAMESPACE).svc.cluster.local"
            - name: REPMGR_NODE_NAME
              value: "$(MY_POD_NAME)"
            - name: REPMGR_NODE_NETWORK_NAME
              value: "$(MY_POD_NAME).postgres-headless-svc.$(REPMGR_NAMESPACE).svc.cluster.local"
            - name: REPMGR_LOG_LEVEL
              value: "NOTICE"
            - name: REPMGR_CONNECT_TIMEOUT
              value: "5"
            - name: REPMGR_RECONNECT_ATTEMPTS
              value: "3"
            - name: REPMGR_RECONNECT_INTERVAL
              value: "5"
            - name: REPMGR_USERNAME
              value: "repmgr"
            - name: REPMGR_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secrets
                  key: repmgr-password
            - name: REPMGR_DATABASE
              value: "repmgr"
          ports:
            - name: postgresql
              containerPort: 5432
              protocol: TCP
          livenessProbe:
            exec:
              command:
                - bash
                - -ec
                - 'PGPASSWORD=$POSTGRES_PASSWORD psql -w -U "postgres" -d "postgres"  -h 127.0.0.1 -c "SELECT 1"'
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - bash
                - -ec
                - 'PGPASSWORD=$POSTGRES_PASSWORD psql -w -U "postgres" -d "postgres"  -h 127.0.0.1 -c "SELECT 1"'
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
            - name: data
              mountPath: /bitnami/postgresql
            - name: hooks-scripts
              mountPath: /pre-stop.sh
              subPath: pre-stop.sh
      volumes:
        - name: hooks-scripts
          configMap:
            name: postgres-cm
            defaultMode: 0755
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "1Gi"

# Pgpool
# ---
# apiVersion: v1
# kind: Secret
# metadata:
#   name: pgpool-secrets
# data:
#   admin-password: "SFRzaVZxYjdSZQ=="

# ---
# apiVersion: v1
# kind: Service
# metadata:
#   name: pgpool-svc
# spec:
#   type: ClusterIP
#   sessionAffinity: None
#   ports:
#     - name: postgresql
#       port: 5432
#       targetPort: postgresql
#       protocol: TCP
#   selector:
#     app: pgpool
  
# ---

# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: pgpool
# spec:
#   replicas: 1
#   selector:
#     matchLabels: 
#       app: pgpool
#   template:
#     metadata:
#       labels: 
#         app: pgpool
#     spec:          
#       securityContext:
#         fsGroup: 1001
#       containers:
#         - name: pgpool
#           image: docker.io/bitnami/pgpool:4.5.2-debian-12-r6
#           imagePullPolicy: "IfNotPresent"
#           securityContext:
#             runAsUser: 1001
#           env:
#             - name: BITNAMI_DEBUG
#               value: "false"
#             - name: PGPOOL_BACKEND_NODES
#               value: 0:postgres-0.postgres-headless-svc:5432,1:postgres-1.postgres-headless-svc:5432,2:postgres-2.postgres-headless-svc:5432
#             - name: PGPOOL_SR_CHECK_USER
#               value: "repmgr"
#             - name: PGPOOL_SR_CHECK_PASSWORD
#               valueFrom:
#                 secretKeyRef:
#                   name: postgres-secrets
#                   key: repmgr-password
#             - name: PGPOOL_SR_CHECK_DATABASE
#               value: "postgres"
#             - name: PGPOOL_ENABLE_LDAP
#               value: "no"
#             - name: PGPOOL_POSTGRES_USERNAME
#               value: "postgres"
#             - name: PGPOOL_POSTGRES_PASSWORD
#               valueFrom:
#                 secretKeyRef:
#                   name: postgres-secrets
#                   key: postgresql-password
#             - name: PGPOOL_ADMIN_USERNAME
#               value: "admin"
#             - name: PGPOOL_ADMIN_PASSWORD
#               valueFrom:
#                 secretKeyRef:
#                   name: pgpool-secrets
#                   key: admin-password
#             - name: PGPOOL_ENABLE_LOAD_BALANCING
#               value: "yes"
#             - name: PGPOOL_ENABLE_LOG_CONNECTIONS
#               value: "no"
#             - name: PGPOOL_ENABLE_LOG_HOSTNAME
#               value: "yes"
#             - name: PGPOOL_ENABLE_LOG_PER_NODE_STATEMENT
#               value: "no"
#             - name: PGPOOL_CHILD_LIFE_TIME
#               value: ""
#             - name: PGPOOL_ENABLE_TLS
#               value: "no"
#           ports:
#             - name: postgresql
#               containerPort: 5432
#               protocol: TCP
#           livenessProbe:
#             exec:
#               command:
#                 - /opt/bitnami/scripts/pgpool/healthcheck.sh
#             initialDelaySeconds: 30
#             periodSeconds: 10
#             timeoutSeconds: 5
#             successThreshold: 1
#             failureThreshold: 5
#           readinessProbe:
#             exec:
#               command:
#                 - bash
#                 - -ec
#                 - PGPASSWORD=${PGPOOL_POSTGRES_PASSWORD} psql -U "postgres" -d "postgres" -h /opt/bitnami/pgpool/tmp -tA -c "SELECT 1" >/dev/null
#             initialDelaySeconds: 5
#             periodSeconds: 5
#             timeoutSeconds: 5
#             successThreshold: 1
#             failureThreshold: 5


